/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#define ZMK_POINTING_DEFAULT_MOVE_VAL 1500  // default: 600
#define ZMK_POINTING_DEFAULT_SCRL_VAL 20

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/pointing.h>
#include <dt-bindings/zmk/pointing.h>
#include <dt-bindings/zmk/pointing.h>

/ {
    behaviors {
        hml: hml {
            compatible = "zmk,behavior-hold-tap";
            label = "HML";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <280>;
            quick-tap-ms = <175>;
            require-prior-idle-ms = <150>;
            flavor = "balanced";
            hold-trigger-on-release;
            hold-trigger-key-positions = <12 11 12 13 14 10 11 12 13 14>;
        };

        hmr: hmr {
            compatible = "zmk,behavior-hold-tap";
            label = "HMR";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <280>;
            quick-tap-ms = <175>;
            require-prior-idle-ms = <150>;
            flavor = "balanced";
            hold-trigger-on-release;
            hold-trigger-key-positions = <15 16 17 18 19 16 17 18 19>;
        };
    };

    combos {
        compatible = "zmk,combos";

        jkesc {
            bindings = <&kp ESCAPE>;
            key-positions = <16 17>;
        };

        medialayer {
            bindings = <&to 5>;
            key-positions = <0 1 2>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            // ------------------------------------------------------------------------------------------------------------
            // |  TAB  |  Q  |  W  |  E   |  R   |  T   |                   |  Y   |  U    |  I    |  O   |   P   |   -   |
            // |  CTRL |  A  |  S  |  D   |  F   |  G   |                   |  H   |  J    |  K    |  L   |   ;   |   '   |
            // | SHIFT |  Z  |  X  |  C   |  V   |  B   |                   |  N   |  M    |  ,    |  .   |   /   | SHIFT |
            //                   | GUI  | LOWER|  SPACE |                   | ENTER | RAISE|  ALT  |

            bindings = <
&kp Q                &kp W            &kp E              &kp R                &kp T                        &kp Y                         &kp U                 &kp I               &kp O             &kp P
&hml LEFT_COMMAND A  &hml LEFT_ALT S  &hml LEFT_SHIFT D  &hml LEFT_CONTROL F  &hml LS(LA(LC(LEFT_GUI))) G  &hmr LS(LA(LC(RIGHT_GUI))) H  &hmr RIGHT_CONTROL J  &hmr RIGHT_SHIFT K  &hmr RIGHT_ALT L  &hmr RIGHT_GUI SEMICOLON
&kp Z                &kp X            &kp C              &kp V                &kp B                        &kp N                         &kp M                 &kp COMMA           &kp DOT           &lt 3 SLASH
                                                                              &lt 1 TAB                    &lt 2 BACKSPACE        
            >;
        };

        layer_1 {
            bindings = <
&kp N1    &kp N2    &kp N3     &kp N4     &kp N5  &kp N6    &kp N7          &kp N8        &kp N9     &kp N0
&kp LGUI  &kp LALT  &kp LSHFT  &kp LCTRL  &trans  &kp LEFT  &kp DOWN_ARROW  &kp UP_ARROW  &kp RIGHT  &trans
&trans    &trans    &trans     &trans     &trans  &trans    &trans          &trans        &trans     &trans
                                          &trans  &trans                     
            >;
        };

        layer_2 {
            bindings = <
&kp EXCLAMATION  &kp AT_SIGN  &kp HASH  &kp DOLLAR  &kp PERCENT  &kp CARET       &kp AMPERSAND  &kp ASTERISK      &kp LEFT_PARENTHESIS  &kp RIGHT_PARENTHESIS
&kp GRAVE        &trans       &trans    &trans      &trans       &kp MINUS       &kp EQUAL      &kp LEFT_BRACKET  &kp RIGHT_BRACKET     &kp BACKSLASH
&trans           &trans       &trans    &trans      &trans       &kp UNDERSCORE  &kp PLUS       &kp LEFT_BRACE    &kp RIGHT_BRACE       &kp PIPE
                                          &trans  &trans                     
            >;
        };

        bt_layer {
            bindings = <
&kp F1      &kp F2   &kp F3  &kp F4  &kp F5  &kp F6             &kp F7         &kp F8                &kp F9           &kp F10
&kp F11     &kp F12  &trans  &trans  &trans  &kp C_VOLUME_DOWN  &kp C_BRI_DEC  &kp C_BRIGHTNESS_INC  &kp C_VOLUME_UP  &bt BT_CLR
&bt BT_CLR  &trans   &trans  &trans  &trans  &bt BT_SEL 0       &bt BT_SEL 1   &bt BT_SEL 2          &bt BT_SEL 3     &bt BT_SEL 4
                                          &trans  &trans                     
            >;
        };

        mouse_layer {
            bindings = <
&trans        &trans        &trans     &trans     &trans  &kp K_REDO       &kp K_PASTE     &kp K_COPY    &kp K_CUT        &kp K_UNDO
&kp LEFT_GUI  &kp LEFT_ALT  &kp LSHFT  &kp LCTRL  &trans  &mmv MOVE_LEFT   &mmv MOVE_DOWN  &mmv MOVE_UP  &mmv MOVE_RIGHT  &kp K_MUTE
&trans        &trans        &trans     &trans     &trans  &msc SCRL_RIGHT  &msc SCRL_DOWN  &msc SCRL_UP  &msc SCRL_RIGHT  &trans
                                      &trans  &mkp LCLK        
            >;
        };

        media {
            bindings = <
&to 0   &trans  &trans  &trans  &trans  &kp C_PREVIOUS  &trans         &trans        &kp C_NEXT       &trans
&trans  &trans  &trans  &trans  &trans  &kp LEFT        &kp DOWN       &kp UP        &kp RIGHT        &trans
&trans  &trans  &trans  &trans  &trans  &kp C_VOL_DN    &kp C_BRI_DEC  &kp C_BRI_UP  &kp C_VOLUME_UP  &trans
                      &kp SPACE       &trans         
            >;
        };
    };
};
